{"version":3,"sources":["components/Header.js","contexts/CurrentUserContext.js","components/Card.js","components/Main.js","components/Footer.js","components/ImagePopup.js","utils/utils.js","utils/Api.js","components/PopupWithForm.js","components/EditProfilePopup.js","components/EditAvatarPopup.js","components/AddPlacePopup.js","components/DeleteConfirmPopup.js","components/App.js","serviceWorker.js","index.js","images/logo.svg","images/pencil.svg"],"names":["Header","className","src","logo","alt","CurrentUserContext","React","createContext","Card","props","currentUser","useContext","card","onCardClick","onCardLike","onCardDelete","isOwn","owner","_id","cardDeleteButtonClassName","isLiked","likes","some","i","cardLikeButtonClassName","imageStyle","backgroundImage","link","key","onClick","style","name","type","length","Main","avatar","onEditAvatar","pen","data-id","about","onEditProfile","onAddPlace","cards","map","item","Footer","ImagePopup","isOpen","id","onClose","apiData","authorization","baseUrl","api","options","this","_url","_headers","headers","fetch","method","then","res","ok","json","Promise","reject","status","userData","body","JSON","stringify","photoData","PopupWithForm","onSubmit","heading","children","isLoading","buttonText","EditProfilePopup","useState","setName","description","setDescription","useEffect","e","preventDefault","onUpdateUser","onChange","target","value","placeholder","pattern","minLength","maxLength","required","EditAvatarPopup","avatarRef","useRef","current","onUpdateAvatar","ref","focus","AddPlacePopup","newCard","setNewCard","onUpdateCard","DeleteConfirmPopup","onConfirmClick","App","isEditProfilePopupOpen","setIsEditProfilePopupOpen","isAddPlacePopupOpen","setIsAddPlacePopupOpen","isEditAvatarPopupOpen","setIsEditAvatarPopupOpen","isDeleteCardPopupOpen","setIsDeleteCardPopupOpen","setCards","setCurrentUser","setIsLoading","cardDelete","setCardDelete","selectedCard","setSelectedCard","closeAllPopups","all","getUserInfo","getInitialCards","catch","err","console","log","Provider","changeLikeCardStatus","newCards","c","deleteCard","filter","editUserAvatar","finally","editUserInfo","data","addNewCard","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"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","file":"static/js/main.1a55c5de.chunk.js","sourcesContent":["import React from 'react';\nimport logo from '../images/logo.svg';\n\nfunction Header() {\n    return (\n        <header className=\"header\">\n            <img className=\"logo\" src={logo} alt=\"лого\" />\n        </header>\n    );\n}\nexport default Header;","import React from 'react';\nexport const CurrentUserContext = React.createContext();","import React from 'react';\nimport { CurrentUserContext } from '../contexts/CurrentUserContext';\n\nfunction Card(props) {\n    const currentUser = React.useContext(CurrentUserContext);\n    // Определяем, являемся ли мы владельцем текущей карточки\n\n    const {\n        card,\n        onCardClick,\n        onCardLike,\n        onCardDelete } = props;\n    const isOwn = card.owner._id === currentUser._id;\n    // Создаём переменную, которую после зададим в `className` для кнопки удаления\n    const cardDeleteButtonClassName = (\n        `card__trash ${isOwn ? '' : 'card__trash_hidden'}`\n    );\n    // Определяем, есть ли у карточки лайк, поставленный текущим пользователем\n    const isLiked = card.likes.some(i => i._id === currentUser._id);\n    // Создаём переменную, которую после зададим в `className` для кнопки лайка\n    const cardLikeButtonClassName = (`card__like-btn ${isLiked ? 'card__like-btn_active' : ''}`);\n\n    function handleClick() {\n        onCardClick(card)\n    }\n    function handleLike() {\n        onCardLike(card)\n    }\n    function handleDelete() {\n        onCardDelete(card)\n    }\n\n    const imageStyle = {\n        backgroundImage: `url(${card.link})`,\n    };\n    return (\n        <div className=\"card\" key={card._id}>\n            <div className=\"card__image\" onClick={handleClick} style={imageStyle} />\n            <div className=\"card__description\">\n                <h3 className=\"card__title\">{card.name}</h3>\n                <div className=\"card__like\">\n                    <button className={cardLikeButtonClassName} onClick={handleLike} type=\"button\"></button>\n                    <span className=\"card__like-counter\">{card.likes.length}</span>\n                </div>\n            </div>\n            <button className={cardDeleteButtonClassName} type=\"button\" onClick={handleDelete} ></button>\n        </div>\n    );\n}\nexport default Card;","import React from 'react';\nimport Card from './Card';\nimport pen from '../images/pencil.svg';\nimport { CurrentUserContext } from '../contexts/CurrentUserContext';\n\nfunction Main(props) {\n    const currentUser = React.useContext(CurrentUserContext);\n\n    return (\n        <main className=\"content\">\n            <section className=\"profile\">\n                <div className=\"profile__box\">\n                    <img className=\"profile__avatar\" src={currentUser.avatar} alt=\"аватар\" />\n                    <img className=\"profile__pencil\" onClick={props.onEditAvatar} src={pen} alt=\"Редактировать\" />\n                </div>\n                <div className=\"profile__info\">\n                    <div>\n                        <h1 className=\"profile__name\" data-id=\"\">{currentUser.name}</h1>\n                        <p className=\"profile__description\">{currentUser.about}</p>\n                    </div>\n                    <button className=\"profile__edit-button\" onClick={props.onEditProfile} type=\"button\" />\n                </div>\n                <button className=\"add-button\" onClick={props.onAddPlace} type=\"button\" />\n            </section>\n\n            <section className=\"cards\">\n                {props.cards.map(item =>\n                    <Card\n                        key={item._id}\n                        card={item}\n                        onCardClick={props.onCardClick}\n                        onCardLike={props.onCardLike}\n                        onCardDelete={props.onCardDelete}\n                    />)}\n            </section>\n        </main>\n    );\n}\nexport default Main;\n","import React from 'react';\n\nfunction Footer() {\n    return (\n        <footer className=\"footer\">\n            <p className=\"footer__copyright\">&copy; 2020 Самира</p>\n        </footer>\n    )\n}\nexport default Footer","import React from 'react';\n\nfunction ImagePopup(props) {\n    return (\n        <section className={(props.card.isOpen ? \"popup popup_opened\" : \"popup\")} id=\"view-image\">\n            <figure className=\"popup__view\">\n                <button className=\"popup__close\" id=\"close-view\" onClick={props.onClose} type=\"button\">+</button>\n                <img className=\"popup__image\" alt={props.card.name} src={props.card.link} />\n                <figcaption className=\"popup__caption\">{props.card.name}</figcaption>\n            </figure>\n        </section>\n    );\n}\nexport default ImagePopup;\n\n\n","\n//Api Token\nconst apiData = {\n    authorization: '34b93c83-0a5b-42af-bf4b-3169bf836bcd',\n    baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-12'\n};\nexport default apiData;\n","import apiData from './utils.js';\n\nclass Api {\n\n    constructor(options) {\n        this._url = options.baseUrl;\n        this._headers = options.headers;\n    }\n\n    //получить изначальный массив карточек\n    getInitialCards() {\n        return fetch(`${this._url}/cards`, {\n            method: 'GET',\n            headers: this._headers,\n        })\n            .then(res => {\n                if (res.ok) {\n                    return res.json();\n                } else {\n                    return Promise.reject(`Что-то пошло не так: ${res.status}`);\n                }\n            });\n    }\n\n    //получить данные пользователя\n    getUserInfo() {\n        return fetch(`${this._url}/users/me`, {\n            headers: this._headers,\n        })\n            .then(res => {\n                if (res.ok) {\n                    return res.json();\n                } else {\n                    return Promise.reject(`Что-то пошло не так: ${res.status}`);\n                }\n            });\n    }\n\n    //обновить данные юзера\n    editUserInfo(userData) {\n        return fetch(`${this._url}/users/me`, {\n            method: 'PATCH',\n            headers: this._headers,\n            body: JSON.stringify({\n                name: userData.name,\n                about: userData.about\n            }),\n        })\n            .then(res => {\n                if (res.ok) {\n                    return res.json();\n                } else {\n                    return Promise.reject(`Что-то пошло не так: ${res.status}`);\n                }\n            });\n    }\n\n    //Редактирование аватара\n    editUserAvatar(userData) {\n        return fetch(`${this._url}/users/me/avatar`, {\n            method: 'PATCH',\n            headers: this._headers,\n            body: JSON.stringify({\n                avatar: userData.avatar\n            })\n        })\n            .then(res => {\n                if (res.ok) {\n                    return res.json();\n                }\n                return Promise.reject(`Что-то пошло не так: ${res.status}`);\n            })\n    }\n\n    //Добавление новой карточки на сервер\n    addNewCard(photoData) {\n        return fetch(`${this._url}/cards`, {\n            method: 'POST',\n            headers: this._headers,\n            body: JSON.stringify({\n                name: photoData.name,\n                link: photoData.link\n\n            })\n        })\n            .then((res) => {\n                if (res.ok) {\n                    return res.json();\n                }\n                return Promise.reject(`Что-то пошло не так: ${res.status}`);\n            })\n    }\n\n    //Удаление Карточки\n    deleteCard(id) {\n        return fetch(`${this._url}/cards/${id}`, {\n            method: 'DELETE',\n            headers: this._headers,\n        })\n            .then((res) => {\n                if (res.ok) {\n                    return res.json();\n                }\n                return Promise.reject(`Что-то пошло не так: ${res.status}`);\n            })\n    }\n\n    //Добавление Лайков\n    changeLikeCardStatus(id, status) {\n        return fetch(`${this._url}/cards/likes/${id}`, {\n            method: `${(status) ? `PUT` : `DELETE`}`,\n            headers: this._headers,\n        })\n            .then((res) => {\n                if (res.ok) {\n                    return res.json();\n                }\n                return Promise.reject(`Что-то пошло не так: ${res.status}`);\n            })\n    }\n\n    //Удаление Лайков\n    deleteLike(card) {\n        return fetch(`${this._url}/cards/likes/${card._id}`, {\n            method: 'DELETE',\n            headers: this._headers,\n        })\n            .then((res) => {\n                if (res.ok) {\n                    return res.json();\n                }\n                return Promise.reject(`Что-то пошло не так: ${res.status}`);\n            })\n    }\n}\n\n//создаем экземпляр класса Api\nconst api = new Api({\n    baseUrl: apiData.baseUrl,\n    headers: {\n        authorization: apiData.authorization,\n        'Content-Type': 'application/json'\n    }\n});\n\nexport default api;\n","import React from 'react';\n\nfunction PopupWithForm(props) {\n    return (\n        <section className={(props.isOpen ? \"popup popup_opened\" : \"popup\")} id={props.name}>\n            <div className=\"popup__content\" id=\"edit-popup-form\">\n                <button className=\"popup__close\" onClick={props.onClose} id=\"popup-close-edit\" type=\"button\">+</button>\n\n                <form onSubmit={props.onSubmit} className=\"popup__form popup__edit_profile\" name=\"edit\">\n                    <h3 className=\"popup__heading\">{props.heading}</h3>\n                    {props.children}\n                    <button className=\"popup__save-btn\" id=\"popup-save-btn\" type=\"submit\">{props.isLoading ? 'Загрузка...' : props.buttonText}</button>\n                </form>\n            </div>\n        </section>\n    );\n}\nexport default PopupWithForm;","import React from 'react';\nimport PopupWithForm from './PopupWithForm';\nimport { CurrentUserContext } from '../contexts/CurrentUserContext';\n\nfunction EditProfilePopup(props) {\n    const currentUser = React.useContext(CurrentUserContext);\n\n    const [name, setName] = React.useState('');\n    const [description, setDescription] = React.useState('');\n    // После загрузки текущего пользователя из API\n    // его данные будут использованы в управляемых компонентах.\n    React.useEffect(() => {\n        setName(currentUser.name);\n        setDescription(currentUser.about);\n    }, [currentUser]);\n\n    function handleNameInput(e) {\n        setName(e.target.value);\n    }\n    function handleDescriptionInput(e) {\n        setDescription(e.target.value);\n    }\n    function handleSubmit(e) {\n        e.preventDefault();\n        props.onUpdateUser({\n            name: name,\n            about: description,\n        });\n    }\n\n    return (\n        <PopupWithForm isOpen={props.isOpen} onClose={props.onClose} onSubmit={handleSubmit} heading=\"Редактировать профиль\" buttonText=\"Сохранить\" isLoading={props.isLoading}>\n            <input\n                className=\"popup__field popup__field_name\"\n                onChange={handleNameInput}\n                value={name}\n                id=\"name-field\"\n                placeholder=\"Имя\"\n                type=\"text\"\n                name=\"name\"\n                pattern=\"[A-Za-zА-Яа-яЁё -]*\"\n                minLength=\"2\"\n                maxLength=\"40\"\n                required />\n            <span className=\"popup__span-error\" id=\"name-field-error\"></span>\n            <input\n                className=\"popup__field popup__field_job\"\n                value={description}\n                onChange={handleDescriptionInput}\n                id=\"job-field\" placeholder=\"О себе\"\n                type=\"text\"\n                name=\"about\"\n                required\n                minLength=\"2\"\n                maxLength=\"200\" />\n            <span className=\"popup__span-error\" id=\"job-field-error\"></span>\n        </PopupWithForm >\n    )\n\n}\nexport default EditProfilePopup;","import React from 'react';\nimport PopupWithForm from './PopupWithForm';\nimport { CurrentUserContext } from '../contexts/CurrentUserContext';\n\n\nfunction EditAvatarPopup(props) {\n    const currentUser = React.useContext(CurrentUserContext);\n\n    const avatarRef = React.useRef();\n\n    function handleSubmit(e) {\n        e.preventDefault();\n\n        props.onUpdateAvatar({\n            avatar: avatarRef.current.value, /* Значение инпута, полученное с помощью рефа */\n        });\n    }\n\n    function handleClick() {\n        avatarRef.current.focus(); \n        // вызываем нужный метод на поле current объекта\n      }\n\n      React.useEffect(() => {\n        avatarRef.current.value = '';\n      }, [currentUser]);\n\n    return (\n        <PopupWithForm isOpen={props.isOpen} onClose={props.onClose} onSubmit={handleSubmit} heading=\"Обновить аватар?\" buttonText=\"Сохранить\" isLoading={props.isLoading}>\n            <input\n                className=\"popup__field popup__field_avatar\"\n                ref={avatarRef}\n                onChange={handleClick}\n                id=\"url-input\"\n                placeholder=\"Ссылка на картинку\"\n                type=\"url\"\n                name=\"link\"\n                required />\n            <span className=\"popup__span-error\" id=\"url-input-error\"></span>\n        </PopupWithForm>\n\n    )\n}\nexport default EditAvatarPopup","import React from 'react';\nimport PopupWithForm from './PopupWithForm';\n\n\nfunction AddPlacePopup(props) {\n    const [newCard, setNewCard] = React.useState({ name: '', link: '' });\n\n    React.useEffect(() => {\n        setNewCard({ name: '', link: '' });\n        \n      }, [props.isOpen]);\n\n    function handleCardNameInput(e) {\n        setNewCard({ ...newCard, name: e.target.value });\n    }\n    function handleLinkInput(e) {\n        setNewCard({ ...newCard, link: e.target.value });\n    }\n\n    \n    function handleSubmit(e) {\n        e.preventDefault();\n        props.onUpdateCard(newCard);\n    }\n\n    return (\n\n        <PopupWithForm isOpen={props.isOpen} onClose={props.onClose} onSubmit={handleSubmit} heading=\"Новое место\" buttonText=\"Создать\" isLoading={props.isLoading}>\n            <input\n                className=\"popup__field popup__field_card\"\n                id=\"title-input\"\n                onChange={handleCardNameInput}\n                placeholder=\"Название\"\n                type=\"text\"\n                name=\"name\"\n                value={newCard.name}\n                required\n                minLength=\"1\"\n                maxLength=\"30\" />\n            <span className=\"popup__span-error\" id=\"title-input-error\"></span>\n            <input\n                className=\"popup__field popup__field_link\"\n                onChange={handleLinkInput}\n                value={newCard.link}\n                id=\"url-input\" placeholder=\"Ссылка на картинку\"\n                type=\"url\"\n                required name=\"link\" />\n            <span className=\"popup__span-error\" id=\"url-input-error\"></span>\n        </PopupWithForm >\n    )\n}\nexport default AddPlacePopup","import React from 'react';\nimport PopupWithForm from './PopupWithForm';\n\n\nfunction DeleteConfirmPopup(props) {\n\n    function handleSubmit(e) {\n        e.preventDefault();\n        props.onConfirmClick();\n    }\n\n    return (\n        <PopupWithForm heading=\"Вы уверены?\" buttonText=\"Да\" isOpen={props.isOpen} onClose={props.onClose} onSubmit={handleSubmit} />\n    )\n}\n\nexport default DeleteConfirmPopup","import React from 'react';\nimport Header from './Header';\nimport Main from './Main';\nimport Footer from './Footer';\nimport ImagePopup from './ImagePopup';\nimport { CurrentUserContext } from '../contexts/CurrentUserContext';\nimport api from '../utils/Api.js';\nimport EditProfilePopup from './EditProfilePopup';\nimport EditAvatarPopup from './EditAvatarPopup';\nimport AddPlacePopup from './AddPlacePopup';\nimport DeleteConfirmPopup from './DeleteConfirmPopup';\n\nfunction App() {\n  const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = React.useState(false);\n  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = React.useState(false);\n  const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = React.useState(false);\n  const [isDeleteCardPopupOpen, setIsDeleteCardPopupOpen] = React.useState(false);\n  const [cards, setCards] = React.useState([]);\n  const [currentUser, setCurrentUser] = React.useState({ name: '', about: '', avatar: '', _id: '' });\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [cardDelete, setCardDelete] = React.useState({});\n  const [selectedCard, setSelectedCard] = React.useState({\n    isOpen: false,\n    name: '',\n    link: ''\n  });\n\n\n  React.useEffect(() => {\n\n    Promise.all([api.getUserInfo(), api.getInitialCards()])\n      .then(([userData, cards]) => {\n        setCards(cards);\n        setCurrentUser(userData);\n\n      })\n      .catch(err => console.log(err));\n\n  }, []);\n\n  //обработчики открытия попапов\n  function handleEditAvatarClick() {\n    setIsEditAvatarPopupOpen(true);\n  }\n  function handleEditProfileClick() {\n    setIsEditProfilePopupOpen(true);\n  }\n  function handleAddPlaceClick() {\n    setIsAddPlacePopupOpen(true);\n  }\n  function handleConfirmPopupClick() {\n    setIsDeleteCardPopupOpen(true);\n  }\n  //при нажатии на удаление карточки открываем попам подтверждения\n  function handleCardDelete(card) {\n    setCardDelete(card)\n    handleConfirmPopupClick();\n  }\n  //обработчик закрытия попапов\n  function closeAllPopups() {\n    setIsEditAvatarPopupOpen(false);\n    setIsEditProfilePopupOpen(false);\n    setIsAddPlacePopupOpen(false);\n    setIsDeleteCardPopupOpen(false);\n    setSelectedCard(false);\n  }\n\n  function handleCardClick(props) {\n    setSelectedCard({\n      isOpen: true,\n      name: props.name,\n      link: props.link\n    });\n  }\n  //обработчик обновления данных пользователя\n  function handleUpdateUser(userData) {\n    setIsLoading(true);\n    api.editUserInfo(userData)\n      .then((res) => {\n        setCurrentUser({ ...currentUser, name: res.name, about: res.about });\n        closeAllPopups();\n      })\n      .catch(err => console.log(err))\n      .finally(() => setIsLoading(false));\n  }\n  //обработчик обновления аватара\n  function handleUpdateAvatar(userData) {\n    setIsLoading(true);\n    api.editUserAvatar(userData)\n      .then((res) => {\n        setCurrentUser({ ...currentUser, avatar: res.avatar });\n        closeAllPopups();\n      })\n      .catch(err => console.log(err))\n      .finally(() => setIsLoading(false));\n  }\n\n  //обработчик добавления карточки\n  function handleAddPlaceSubmit(data) {\n    setIsLoading(true);\n    api.addNewCard(data)\n      .then((photoData) => {\n        setCards([...cards, photoData]);\n        closeAllPopups();\n      })\n      .catch(err => console.log(err))\n      .finally(() => setIsLoading(false));\n  }\n\n  function handleCardLike(card) {\n    // Снова проверяем, есть ли уже лайк на этой карточке\n    const isLiked = card.likes.some(i => i._id === currentUser._id);\n    // Отправляем запрос в API и получаем обновлённые данные карточки\n    api.changeLikeCardStatus(card._id, !isLiked).then((newCard) => {\n      // Формируем новый массив на основе имеющегося, подставляя в него новую карточку\n      const newCards = cards.map((c) => c._id === card._id ? newCard : c);\n      // Обновляем стейт\n      setCards(newCards);\n    });\n  }\n\n  //обработчик удаления карточки\n  function handleCardDeleteSubmit() {\n    // Отправляем запрос в API и получаем обновлённые данные карточки\n    api.deleteCard(cardDelete._id)\n      .then(() => {\n        // Формируем новый массив на основе имеющегося, подставляя в него новую карточку\n        const newCards = cards.filter((c) => c._id !== cardDelete._id);\n        // Обновляем стейт\n        setCards(newCards);\n        closeAllPopups();\n      })\n      .catch(err => console.log(err))\n  }\n\n  return (\n    <CurrentUserContext.Provider value={currentUser}>\n\n      <div className=\"page\">\n        <Header />\n        <Main\n          onEditProfile={handleEditProfileClick}\n          onAddPlace={handleAddPlaceClick}\n          onEditAvatar={handleEditAvatarClick}\n          onCardClick={handleCardClick}\n          cards={cards}\n          onCardLike={handleCardLike}\n          onCardDelete={handleCardDelete}\n        />\n\n        <DeleteConfirmPopup isOpen={isDeleteCardPopupOpen} onClose={closeAllPopups} onConfirmClick={handleCardDeleteSubmit} />\n\n        <EditAvatarPopup isOpen={isEditAvatarPopupOpen} onClose={closeAllPopups} onUpdateAvatar={handleUpdateAvatar} isLoading={isLoading} />\n\n        <EditProfilePopup isOpen={isEditProfilePopupOpen} onClose={closeAllPopups} onUpdateUser={handleUpdateUser} isLoading={isLoading} />\n\n        <AddPlacePopup isOpen={isAddPlacePopupOpen} onClose={closeAllPopups} onUpdateCard={handleAddPlaceSubmit} isLoading={isLoading} />\n\n        <ImagePopup card={selectedCard} onClose={closeAllPopups} />\n\n        <Footer />\n\n      </div>\n    </CurrentUserContext.Provider >\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.c6f11019.svg\";","module.exports = __webpack_public_path__ + \"static/media/pencil.9a053c9f.svg\";"],"sourceRoot":""}